from typing import List, Union
from .SBTypeEnumMember import SBTypeEnumMember
from .SBTypeEnumMemberList import SBTypeEnumMemberList
from .SBTypeList import SBTypeList
from .SBTypeMember import SBTypeMember


class SBType:
    bases: List[SBTypeMember]
    enum_members: List[SBTypeEnumMember]
    fields: List[SBTypeMember]
    is_complete: bool
    is_pointer: bool
    is_reference: bool
    members: List[SBTypeMember]
    module: 'SBModule'
    name: str
    num_bases: int
    num_fields: int
    num_template_args: int
    num_vbases: int
    size: int
    template_args: List['SBType']
    type: int
    vbases: int

    def FindDirectNestedType(self, name: str) -> 'SBType': ...

    def GetArrayElementType(self) -> 'SBType': ...

    def GetArrayType(self, size: int) -> 'SBType': ...

    def GetBasicType(self, basic_type: int = None) -> Union[int, 'SBType']: ...

    def GetByteSize(self) -> int: ...

    def GetCanonicalType(self) -> 'SBType': ...

    def GetDereferencedType(self) -> 'SBType': ...

    def GetDescription(self, description: 'SBStream', description_level: int) -> bool: ...

    def GetDirectBaseClassAtIndex(self, idx: int) -> SBTypeMember: ...

    def GetDisplayTypeName(self) -> str: ...

    def GetEnumMembers(self) -> SBTypeEnumMemberList: ...

    def GetEnumerationIntegerType(self) -> 'SBType': ...

    def GetFieldAtIndex(self, idx: int) -> SBTypeMember: ...

    def GetFunctionArgumentTypes(self) -> SBTypeList: ...

    def GetFunctionReturnType(self) -> 'SBType': ...

    def GetMemberFunctionAtIndex(self, idx: int) -> 'SBTypeMemberFunction': ...

    def GetModule(self) -> 'SBModule': ...

    def GetName(self) -> str: ...

    def GetNumberOfDirectBaseClasses(self) -> int: ...

    def GetNumberOfFields(self) -> int: ...

    def GetNumberOfMemberFunctions(self) -> int: ...

    def GetNumberOfTemplateArguments(self) -> int: ...

    def GetNumberOfVirtualBaseClasses(self) -> int: ...

    def GetPointeeType(self) -> 'SBType': ...

    def GetPointerType(self) -> 'SBType': ...

    def GetReferenceType(self) -> 'SBType': ...

    def GetTemplateArgumentKind(self, idx: int) -> int: ...

    def GetTemplateArgumentType(self, idx: int) -> 'SBType': ...

    def GetTypeClass(self) -> int: ...

    def GetTypeFlags(self) -> int: ...

    def GetTypedefedType(self) -> 'SBType': ...

    def GetUnqualifiedType(self) -> 'SBType': ...

    def GetVectorElementType(self) -> 'SBType': ...

    def GetVirtualBaseClassAtIndex(self, idx: int) -> SBTypeMember: ...

    def IsAggregateType(self) -> bool: ...

    def IsAnonymousType(self) -> bool: ...

    def IsArrayType(self) -> bool: ...

    def IsFunctionType(self) -> bool: ...

    def IsPointerType(self) -> bool: ...

    def IsPolymorphicClass(self) -> bool: ...

    def IsReferenceType(self) -> bool: ...

    def IsScopedEnumerationType(self) -> bool: ...

    def IsTypeComplete(self) -> bool: ...

    def IsTypedefType(self) -> bool: ...

    def IsValid(self) -> bool: ...

    def IsVectorType(self) -> bool: ...

    def get_bases_array(self) -> List['SBType']: ...

    def get_enum_members_array(self) -> List['SBType']: ...

    def get_fields_array(self) -> List['SBType']: ...

    def get_members_array(self) -> List['SBType']: ...

    def get_vbases_array(self) -> List['SBType']: ...