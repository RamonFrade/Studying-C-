from .SBModule import SBModule
from .SBTarget import SBTarget


class SBAddress:
    block: 'SBBlock'
    compile_unit: 'SBCompileUnit'
    file_addr: int
    function: 'SBFunction'
    line_entry: 'SBLineEntry'
    load_addr: int
    module: SBModule
    offset: int
    section: 'SBSection'
    symbol: 'SBSymbol'

    def Clear(self): ...

    def GetBlock(self) -> 'SBBlock': ...

    def GetCompileUnit(self) -> 'SBCompileUnit': ...

    def GetDescription(self, description: 'SBStream') -> bool: ...

    def GetFileAddress(self) -> int: ...

    def GetFunction(self) -> 'SBFunction': ...

    def GetLineEntry(self) -> 'SBLineEntry': ...

    def GetLoadAddress(self, target: SBTarget) -> int: ...

    def GetModule(self) -> SBModule: ...

    def GetOffset(self) -> int: ...

    def GetSection(self) -> 'SBSection': ...

    def GetSymbol(self) -> 'SBSymbol': ...

    def GetSymbolContext(self, resolve_scope: int) -> 'SBSymbolContext': ...

    def IsValid(self) -> bool: ...

    def OffsetAddress(self, offset: int) -> bool: ...

    def SetAddress(self, section: 'SBSection', offset: int): ...

    def SetLoadAddress(self, load_addr: int, target: SBTarget): ...
