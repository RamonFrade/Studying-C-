from typing import Any

from .SBAddress import SBAddress
from .SBError import SBError
from .SBModule import SBModule
from .SBValue import SBValue
from .SBValueList import SBValueList

class SBFrame:
    addr: SBAddress
    args: SBValueList
    arguments: SBValueList
    block: 'SBBlock'
    compile_unit: 'SBCompileUnit'
    disassembly: str
    fp: int
    function: 'SBFunction'
    idx: int
    is_inlined: bool
    line_entry: 'SBLineEntry'
    locals: SBValueList
    module: SBModule
    name: 'str'
    parent: 'SBFrame'
    pc: int
    register: Any
    registers: SBValueList
    regs: SBValueList
    sp: int
    statistics: SBValueList
    symbol: 'SBSymbol'
    thread: 'SBThread'
    variables: SBValueList
    vars: SBValueList

    def Clear(self): ...

    def Disassemble(self) -> str: ...

    def EvaluateExpression(self, expr: str, use_dynamic: int = None, unwind_on_error: bool = False) -> SBValue: ...

    def FindRegister(self, name: str, value_type: int = None, use_dynamic: int = None) -> SBValue: ...

    def FindVariable(self, var_name: str, use_dynamic: int = None) -> SBValue: ...

    def GetBlock(self) -> 'SBBlock': ...

    def GetCFA(self) -> int: ...

    def GetCompileUnit(self) -> 'SBCompileUnit': ...

    def GetDescription(self, description: 'SBFrame') -> bool: ...

    def GetDescriptionWithFormat(self, format: 'SBFormat', output: 'SBStream') -> SBError: ...

    def GetDisplayFunctionName(self) -> str: ...

    def GetFP(self) -> int: ...

    def GetFrameBlock(self) -> 'SBBlock': ...

    def GetFrameID(self) -> int: ...

    def GetFunction(self) -> 'SBFunction': ...

    def GetFunctionName(self) -> str: ...

    def GetLineEntry(self) -> 'SBLineEntry': ...

    def GetModule(self) -> SBModule: ...

    def GetPC(self) -> int: ...

    def GetPCAddress(self) -> SBAddress: ...

    def GetRegisters(self) -> SBValueList: ...

    def GetSp(self) -> int: ...

    def GetSymbol(self) -> 'SBSymbol': ...

    def GetSymbolContext(self) -> 'SBSymbolConttext': ...

    def GetThread(self) -> 'SBThread': ...

    def GetValueForVariablePath(self, var_expr_cstr: str, use_dynamic = None) -> SBValue: ...

    def GetVariables(self, arguments: bool, locals: bool, statistics: bool, in_scope_only: bool, use_dynamic: int = None) -> SBValueList: ...

    def GuessLanguage(self) -> int: ...

    def IsArtificial(self) -> bool: ...

    def IsEqual(self, that: 'SBFrame') -> bool: ...

    def IsInlined(self) -> bool: ...

    def IsValid(self) -> bool: ...

    def SetPC(self, new_pc: int) -> bool: ...




