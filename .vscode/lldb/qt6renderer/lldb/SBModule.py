from typing import List, Union

from .SBAddress import SBAddress
from .SBTarget import SBTarget
from .SBType import SBType
from .SBTypeList import SBTypeList


class SBModule:
    addr_size: int
    byte_order: int
    compile_units: List['SBCompileUnit']
    file: 'SBFileSpec'
    num_sections: int
    num_symbols: int
    platform_file: 'SBFileSpec'
    section: Union['SBCompileUnit', List['SBCompileUnit']]
    sections: List['SBCompileUnit']
    symbol: Union['SBSymbol', List['SBSymbol']]
    symbols: List['SBSymbol']
    triple: str
    uuid: int

    def Clear(self): ...

    def FindCompileUnits(self, sb_file_spec: 'SBFileSpec') -> 'SBSymbolContextList': ...

    def FindFirstGlobalVariable(self, target: SBTarget, name: str) -> SBValue: ...

    def FindFirstType(self, name: str) -> SBType: ...

    def FindFunctions(self, name: str, name_type_mask: int) -> 'SBSymbolContextList': ...

    def FindGlobalVariables(self, target: SBTarget) -> 'SBValueList': ...

    def FindSection(self, name: str) -> 'SBSection': ...

    def FindSymbol(self, name: str, type: int) -> 'SBSymbol': ...

    def FindSymbols(self, name: str, type: int) -> 'SBSymbolContextList': ...

    def FindTypes(self, type: str) -> SBTypeList: ...

    def GetAddressByteSize(self) -> int: ...

    def GetBasicType(self) -> int: ...

    def GetByteOrder(self) -> int: ...

    def GetCompileUnitAtIndex(self, arg2: int) -> 'SBCompileUnit': ...

    def GetDescription(self, description: 'SBStream') -> bool: ...

    def GetFileSpec(self) -> 'SBFileSpec': ...

    def GetNumCompileUnits(self) -> int: ...

    def GetNumSections(self) -> int: ...

    def GetNumSymbols(self) -> int: ...

    def GetObjectFileEntryPointAddress(self) -> SBAddress: ...

    def GetObjectFileHeaderAddress(self) -> SBAddress: ...

    def GetPlatformFileSpec(self) -> 'SBFileSpec': ...

    def GetRemoteInstallFileSpec(self) -> 'SBFileSpec': ...

    def GetSectionAtIndex(self) -> 'SBSection': ...

    def GetSymbolAtIndex(self, idx: int) -> 'SBSymbol': ...

    def GetSymbolFileSpec(self) -> 'SBFileSpec': ...

    def GetTriple(self) -> str: ...

    def GetTypeByID(self, uid: int) -> SBType: ...

    def GetTypes(self, type_mask: int) -> SBTypeList: ...

    def GetUUIDBytes(self) -> str: ...

    def GetUUIDString(self) -> str: ...

    def GetVersion(self) -> int: ...

    def IsFileBacked(self) -> bool: ...

    def IsValid(self) -> bool: ...

    def ResolveFileAddress(self, vm_addr: int) -> SBAddress: ...

    def ResolveSymbolContextForAddress(self, addr: SBAddress, resolve_scope) -> 'SBSymbolContext': ...

    def SetPlatformFileSpec(self, platform_file: 'SBFileSpec') -> bool: ...

    def SetRemoteInstallFileSpec(self, file: 'SBFileSpec ') -> bool: ...
