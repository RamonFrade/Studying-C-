from typing import List

from .SBError import SBError
from .SBTarget import SBTarget


class SBProcess:
    exit_description: str
    exit_state: int
    id: int
    is_alive: bool
    is_running: bool
    is_stopped: bool
    num_threads: int
    selected_thread: 'SBThread'
    state: int
    target: SBTarget
    thread: List[str]
    threads: List['SBThread']

    def GetAddressByteSize(self) -> int: ...

    def GetByteOrder(self) -> int: ...

    def GetDescription(self, description: 'SBStream') -> bool: ...

    def GetExitDescription(self) -> str: ...

    def GetExitStatus(self) -> int: ...

    def GetSelectedThread(self) -> 'SBThread': ...

    def GetState(self) -> int: ...

    def GetTarget(self) -> SBTarget: ...

    def GetThreadAtIndex(self, index: int) -> 'SBThread': ...

    def GetThreadByID(self, index_id: int) -> 'SBThread': ...

    def GetUniqueID(self) -> int: ...

    def IsValid(self) -> bool: ...

    def ReadCStringFromMemory(self, addr: int, buf_size: int, error: SBError) -> str: ...

    def ReadMemory(self, start: int, length: int, error: SBError) -> str: ...

    def ReadPointerFromMemory(self, addr: int, error: SBError) -> int: ...

    def ReadUnsignedFromMemory(self, addr: int, byte_size: int, error: SBError) -> int: ...

    def WriteMemory(self, addr: int, buf: List[int], error: SBError) -> int: ...

    def WriteMemoryAsCString(self, addr: int, data: str, error: SBError) -> int: ...



